#!/usr/bin/env bash

# This script will create and exchange ssh keys among
# the Raspberry Pi's on the local network.



#################
# Initial setup #
#################
export ppid=${PPID} start_msg="creates and exchanges ssh keys among Raspberry Pi's on the local network"
source "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/environment"



##################################################
# Locate all Raspberry Pi's on the local network #
##################################################
"${this_dir}/locate" "${@}" | tee "locate_output"
if [ ${PIPESTATUS[0]} != 0 ]; then
    trap : 0
    exit 1
fi
ips_pi=""
while read line; do
    if echo "${line}" | grep -i "succesfully" >/dev/null 2>&1; then
        break
    fi
    if [ -z "${ips_pi}" ]; then
        ips_pi=${line}
    else
        ips_pi="$(printf "${line}\n${ips_pi}")"
    fi
done <<< "$(tac "locate_output")"
N_devices="$(echo "${ips_pi}" | wc -l)"
if [ ${N_devices} == 1 ]; then
    error "
Cannot exchange ssh keys with only a single Raspberry Pi!"
    exit 1
else
    printf "
The following ${N_devices} Raspberry Pi's will exchange ssh keys:
${esc_bold}${ips_pi}${esc_normal}
"
fi

sleep 5



################################################################
# Loop over all located Raspberry Pi's and create ssh RSA keys #
################################################################
all_success="yes"
# Create RSA key pairs on all Raspberry Pi's
for ip in ${ips_pi}; do
    execute_on_pi "${ip}" '
    # Create RSA key pair
    rm -rf ~/.ssh
    cat /dev/zero | ssh-keygen -t rsa -N ""

    # Logout
    printf "\nLogging out of the Raspberry Pi ...\t\n"  # The tab signals succcess
    sleep 1
    exit 0
    '
    if [ "${pi_success}" == "no" ]; then
        all_success="no"
    fi
done



###################################################################################
# Loop over all pairs of located Raspberry Pi's and create and share the ssh keys #
###################################################################################
# Get all hostnames of all Raspberry Pi's
printf "\nGet hostnames of all Raspberry Pi's ...\n"
remote_hostnames=""
for ip in ${ips_pi}; do
    execute_on_pi "${ip}" '
    # Printout hostname
    printf "hostname: "
    hostname

    # Logout
    printf "\nLogging out of the Raspberry Pi ...\t\n"  # The tab signals succcess
    sleep 1
    exit 0
    ' | tee "hostname_output"
    if [ "${pi_success}" == "no" ]; then
        all_success="no"
    fi
    remote_hostname="$(grep "hostname" "hostname_output" | awk '{print $2}')"
    if [ -z "${remote_hostnames}" ]; then
        remote_hostnames=${remote_hostname}
    else
        remote_hostnames="$(printf "${remote_hostnames}\n${remote_hostname}")"
    fi
done
# Log onto each Raspberry Pi and do the needed operations
for ip in ${ips_pi}; do
    execute_on_pi "${ip}" '
    ip="'"${ip}"'"
    ips_pi="'"${ips_pi}"'"
    remote_hostnames="'"${remote_hostnames}"'"
    n_host=0
    for ip_remote in ${ips_pi}; do
        ((n_host += 1))
        if [ "${ip_remote}" == "${ip}" ]; then
            continue
        fi
        remote_hostname="$(echo "${remote_hostnames}" | sed "${n_host}q;d")"
        # Add all other hosts to list of known host
        printf "\nAdding host '"'"'${remote_hostname}'"'"' at IP address ${ip} to the list of known hosts ...\n"
        ssh-keygen  -R "${remote_hostname}"                                        2> "/dev/null" || :
        ssh-keygen  -R "${ip_remote}"                                              2> "/dev/null" || :
        ssh-keygen  -R "${remote_hostname}","${ip_remote}"                         2> "/dev/null" || :
        ssh-keyscan -H "${remote_hostname}","${ip_remote}" >> ~/".ssh/known_hosts" 2> "/dev/null" || :
        ssh-keyscan -H "${ip_remote}"                      >> ~/".ssh/known_hosts" 2> "/dev/null" || :
        ssh-keyscan -H "${remote_hostname}"                >> ~/".ssh/known_hosts" 2> "/dev/null" || :

        # Send ssh key to ${ip}
        printf "\nSending ssh key to '"${username}"'@${ip_remote} ...\n"
        sshpass -p "'"${password}"'" ssh-copy-id -p 22 -o ConnectTimeout=60 "'"${username}"'"@${ip_remote}
    done

    # Logout
    printf "\nLogging out of the Raspberry Pi ...\t\n"  # The tab signals succcess
    sleep 1
    exit 0
    '
    if [ "${pi_success}" == "no" ]; then
        all_success="no"
    fi
done

trap : 0
exit 0



########
# Exit #
########
if [ "${all_success}" == "yes" ]; then
    printf "\n${esc_bold}${esc_green}Succesfully installed additional software on
Raspberry Pi's on the local network${esc_normal}\n"
else
    printf "\n${esc_bold}${esc_green}Done installing additional software on
Raspberry Pi's on the local network${esc_normal}\n"
    error "Note that some errors did occur"
    exit 1
fi

# Exit gracefully
trap : 0

